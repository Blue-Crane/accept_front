import { useLocale } from '@hooks/useLocale';
import { Icon, Tip } from '@ui/basics';
import { FC, ReactNode, memo, useCallback, useMemo } from 'react';
import { Notes } from 'tabler-icons-react';
import { openText } from '@utils/openText';
import { sendRequest } from '@requests/request';
import { useRouter } from 'next/router';
import { ITaskTestPayload } from '@custom-types/data/ITaskTest';

const OpenTestInNewTab: FC<{
  spec: string;
  field: 'input' | 'output';
  icon?: ReactNode;
}> = ({ spec, field, icon }) => {
  const router = useRouter();

  const type = useMemo(
    () =>
      router.query.assignment
        ? 'assignment'
        : router.query.tournament
        ? 'tournament'
        : undefined,
    [router.query]
  );

  const querySpec = useMemo(
    () =>
      (router.query.assignment || router.query.tournament) as
        | string
        | undefined,
    [router.query]
  );

  const onClick = useCallback(() => {
    sendRequest<ITaskTestPayload, string>(
      `task_test/field/${field}`,
      'POST',
      {
        test_spec: spec,
        task_base_type: type,
        task_base_spec: querySpec,
      }
    ).then((res) => {
      if (!res.error) openText(res.response);
    });
  }, [field, spec, type, querySpec]);
  const { locale } = useLocale();

  return (
    <>
      <Tip label={locale.newTab}>
        <Icon onClick={onClick} size="xs" color="var(--primary)">
          {icon ? icon : <Notes />}
        </Icon>
      </Tip>
    </>
  );
};

export default memo(OpenTestInNewTab);
